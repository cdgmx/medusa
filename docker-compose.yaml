version: '3.8'

services:
  postgres:
    image: postgres:13
    ports:
      - 5433:5432
    environment:
      SERVICE_FQDN_MEDUSA:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: medusa-docker
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.gzip.compress=true
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.http-0-uwswk0o.entryPoints=http
      - traefik.http.routers.http-0-uwswk0o.middlewares=gzip
      - 'traefik.http.routers.http-0-uwswk0o.rule=Host(`o0g8cwg.goresolvr.xyz`) && PathPrefix(`/`)'
      - coolify.managed=true
      - coolify.version=4.0.0-beta.219
      - coolify.applicationId=2
      - coolify.type=application
      - coolify.name=medusa-backend-ckcwgks-174838897886
      - coolify.pullRequestId=0
  redis:
    image: redis:6
    volumes:
      - redis_data:/data

  medusa-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "9000:9000"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres/medusa-docker
      REDIS_URL: redis://redis:6379
    command: npm run start
    depends_on:
      - postgres
      - redis

  # medusa-admin:
  #   build:
  #     context: ./path/to/admin
  #     dockerfile: Dockerfile.admin # Adjust this path to where your Dockerfile for the admin is located
  #   ports:
  #     - "7000:80" # Assuming Nginx serves on port 80, map it to 7000 on the host
  #   depends_on:
  #     - medusa-backend

volumes:
  postgres_data:
  redis_data:
  medusa_admin_build: # This volume will be used to store the built admin panel



